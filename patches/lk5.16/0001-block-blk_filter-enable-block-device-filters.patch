From 27892e46a58243b6e45596f8aa6e549046977369 Mon Sep 17 00:00:00 2001
From: Sergei Shtepa <sergei.shtepa@veeam.com>
Date: Tue, 29 Mar 2022 12:51:47 +0200
Subject: [PATCH 01/20] block, blk_filter: enable block device filters

Allows to attach block device filters to the block devices.
Kernel modules can use this functionality to extend the
capabilities of the block layer.

Signed-off-by: Sergei Shtepa <sergei.shtepa@veeam.com>
---
 block/Kconfig             |   8 ++
 block/bdev.c              | 159 ++++++++++++++++++++++++++++++++++++++
 block/blk-core.c          |  97 ++++++++++++++++++++++-
 include/linux/blk_types.h |   7 ++
 include/linux/blkdev.h    | 108 ++++++++++++++++++++++++++
 5 files changed, 377 insertions(+), 2 deletions(-)

diff --git a/block/Kconfig b/block/Kconfig
index d5d4197b7ed2..f57543794da2 100644
--- a/block/Kconfig
+++ b/block/Kconfig
@@ -214,6 +214,14 @@ config BLK_MQ_RDMA
 config BLK_PM
 	def_bool PM
 
+config BLK_FILTER
+	bool "Enable block device filters"
+	default n
+	help
+	  Enabling this lets the block layer filters handle bio requests.
+	  Kernel modules can use this feature to extend the functionality
+	  of the block layer.
+
 # do not use in new code
 config BLOCK_HOLDER_DEPRECATED
 	bool
diff --git a/block/bdev.c b/block/bdev.c
index 102837a37051..1070fe0e9374 100644
--- a/block/bdev.c
+++ b/block/bdev.c
@@ -397,6 +397,9 @@ static void bdev_free_inode(struct inode *inode)
 {
 	struct block_device *bdev = I_BDEV(inode);
 
+#ifdef CONFIG_BLK_FILTER
+	percpu_free_rwsem(&bdev->bd_filters_lock);
+#endif
 	free_percpu(bdev->bd_stats);
 	kfree(bdev->bd_meta_info);
 
@@ -419,8 +422,15 @@ static void init_once(void *data)
 	inode_init_once(&ei->vfs_inode);
 }
 
+#ifdef CONFIG_BLK_FILTER
+static void bdev_filter_cleanup(struct block_device *bdev);
+#endif
+
 static void bdev_evict_inode(struct inode *inode)
 {
+#ifdef CONFIG_BLK_FILTER
+	bdev_filter_cleanup(I_BDEV(inode));
+#endif
 	truncate_inode_pages_final(&inode->i_data);
 	invalidate_inode_buffers(inode); /* is it needed here? */
 	clear_inode(inode);
@@ -496,6 +506,11 @@ struct block_device *bdev_alloc(struct gendisk *disk, u8 partno)
 		return NULL;
 	}
 	bdev->bd_disk = disk;
+
+#ifdef CONFIG_BLK_FILTER
+	INIT_LIST_HEAD(&bdev->bd_filters);
+	percpu_init_rwsem(&bdev->bd_filters_lock);
+#endif
 	return bdev;
 }
 
@@ -1061,3 +1076,147 @@ void sync_bdevs(bool wait)
 	spin_unlock(&blockdev_superblock->s_inode_list_lock);
 	iput(old_inode);
 }
+
+#ifdef CONFIG_BLK_FILTER
+
+static void bdev_filter_cleanup(struct block_device *bdev)
+{
+	struct bdev_filter *flt;
+
+	might_sleep();
+	bdev_filter_write_lock(bdev);
+	while ((flt = list_first_entry_or_null(&bdev->bd_filters,
+					       struct bdev_filter, link))) {
+		if (flt->fops && flt->fops->detach_cb)
+			flt->fops->detach_cb(flt->ctx);
+		list_del(&flt->link);
+	}
+	bdev_filter_write_unlock(bdev);
+}
+
+static inline struct bdev_filter *bdev_filter_find(struct block_device *bdev,
+						   const char *name)
+{
+	struct bdev_filter *flt;
+
+	if (list_empty(&bdev->bd_filters))
+		return NULL;
+
+	list_for_each_entry(flt, &bdev->bd_filters, link) {
+		if (strncmp(flt->name, name, BDEV_FILTER_NAME_MAX_LENGTH) == 0)
+			return flt;
+	}
+	return NULL;
+}
+
+/**
+ * bdev_filter_add - Attach a filter to the original block device.
+ * @bdev:
+ *	Block device.
+ * @name:
+ *	Name of the new block device filter.
+ * @fops:
+ *	Table of filter callbacks.
+ * @ctx:
+ *	Filter specific private data.
+ *
+ * Before adding a filter, it is necessary to lock processing
+ * of bio requests for the original device by calling the
+ * bdev_filter_write_lock() function.
+ *
+ * The bdev_filter_del() function allows to delete the filter from the block
+ * device.
+ *
+ * Return:
+ * 0 - OK
+ * -EINVAL - invalid name for the filter, too long
+ * -EALREADY - a filter with this name already exists
+ * -ENOMEM - failed to allocate memory for the struct bdev_filter
+ */
+int bdev_filter_add(struct block_device *bdev, const char *name,
+	       const struct bdev_filter_operations *fops, void *ctx)
+{
+	struct bdev_filter *flt;
+
+	if (strlen(name) > BDEV_FILTER_NAME_MAX_LENGTH)
+		return -EINVAL;
+
+	if (bdev_filter_find(bdev, name))
+		return -EALREADY;
+
+	flt = kzalloc(sizeof(struct bdev_filter), GFP_NOIO);
+	if (!flt)
+		return -ENOMEM;
+
+	INIT_LIST_HEAD(&flt->link);
+	strncpy(flt->name, name, BDEV_FILTER_NAME_MAX_LENGTH);
+	flt->fops = fops;
+	flt->ctx = ctx;
+	list_add(&flt->link, &bdev->bd_filters);
+
+	pr_info("new blk filter [%s] has been added", name);
+	return 0;
+}
+EXPORT_SYMBOL_GPL(bdev_filter_add);
+
+/**
+ * bdev_filter_del - Delete a filter from the block device.
+ * @bdev:
+ *	Block device.
+ * @name:
+ *	Name of the block device filter.
+ *
+ * Before deleting a filter, it is necessary to lock processing
+ * of bio requests for the device by calling the filter_write_lock() function.
+ *
+ * The filter should be added using the bdev_filter_add() function.
+ *
+ * Return:
+ * 0 - OK
+ * -ENOENT - the filter was not found in the linked list
+ */
+int bdev_filter_del(struct block_device *bdev, const char *name)
+{
+	struct bdev_filter *flt;
+
+	flt = bdev_filter_find(bdev, name);
+	if (!flt)
+		return -ENOENT;
+
+	if (flt->fops->detach_cb)
+		flt->fops->detach_cb(flt->ctx);
+	list_del(&flt->link);
+	kfree(flt);
+
+	pr_info("blk filter [%s] has been removed", name);
+	return 0;
+}
+EXPORT_SYMBOL_GPL(bdev_filter_del);
+
+/**
+ * bdev_filter_get_ctx - Get the filter's context value.
+ * @bdev:
+ *	Block device.
+ * @name:
+ *	Name of the block device filter.
+ *
+ * Before geting the filter's context value, it is necessary to lock the list
+ * of filters by calling the filter_read_lock() function.
+ *
+ * Return:
+ * pointer - &ctx value from &struct blk_filter or NULL
+ * NULL - the filter was not found
+ */
+void *bdev_filter_get_ctx(struct block_device *bdev, const char *name)
+{
+	struct bdev_filter *flt;
+
+	flt = bdev_filter_find(bdev, name);
+	if (flt)
+		return flt->ctx;
+	else
+		return NULL;
+}
+EXPORT_SYMBOL_GPL(bdev_filter_get_ctx);
+
+#endif
diff --git a/block/blk-core.c b/block/blk-core.c
index 779b4a1f66ac..4044eee8592d 100644
--- a/block/blk-core.c
+++ b/block/blk-core.c
@@ -882,6 +882,93 @@ static void __submit_bio_noacct_mq(struct bio *bio)
 	current->bio_list = NULL;
 }
 
+#ifdef CONFIG_BLK_FILTER
+
+/**
+ * __filter_bio() - Process bio by the block device filter.
+ * @flt:
+ *	Block device filter.
+ * @bio:
+ *	Original I/O unit.
+ *
+ * Return:
+ * bdev_filter_pass - original bio should be submitted
+ * bdev_filter_skip - do not submit original bio
+ * bdev_filter_redirect - repeat bio processing for another block device
+ */
+static inline enum bdev_filter_result __filter_bio(struct bdev_filter *flt,
+						   struct bio *bio)
+{
+	enum bdev_filter_result result;
+	struct bio *new_bio;
+	struct bio_list bio_list[2] = { };
+
+	do {
+		bio_list_init(&bio_list[0]);
+		current->bio_list = bio_list;
+
+		result = flt->fops->submit_bio_cb(bio, flt->ctx);
+
+		current->bio_list = NULL;
+
+		while ((new_bio = bio_list_pop(&bio_list[0]))) {
+			if (!new_bio->bi_bdev->bd_disk->fops->submit_bio)
+				__submit_bio_noacct_mq(new_bio);
+			else
+				__submit_bio_noacct(new_bio);
+		};
+	} while (result == bdev_filter_repeat);
+
+	return result;
+}
+
+/**
+ * filter_bio_apply() - Pass bio to the block device filters.
+ * @bio:
+ *	Original I/O unit.
+ *
+ * Return:
+ * true - original bio should be submitted
+ * false - do not submit original bio
+ */
+static bool filter_bio(struct bio *bio)
+{
+	enum bdev_filter_result result = bdev_filter_pass;
+	struct block_device *bdev;
+	struct bdev_filter *flt;
+
+	if (bio_flagged(bio, BIO_FILTERED))
+		return true;
+
+	do {
+		bdev = bio->bi_bdev;
+		if (bio->bi_opf & REQ_NOWAIT) {
+			if (!percpu_down_read_trylock(&bdev->bd_filters_lock)) {
+				bio_wouldblock_error(bio);
+				current->bio_list = NULL;
+				return false;
+			}
+		} else
+			percpu_down_read(&bdev->bd_filters_lock);
+
+		if (list_empty(&bdev->bd_filters)) {
+			percpu_up_read(&bdev->bd_filters_lock);
+			break;
+		}
+
+		list_for_each_entry(flt, &bio->bi_bdev->bd_filters, link) {
+			result = __filter_bio(flt, bio);
+			if (result == bdev_filter_skip)
+				break;
+		}
+
+		percpu_up_read(&bdev->bd_filters_lock);
+	} while (result == bdev_filter_redirect);
+
+	return (result == bdev_filter_pass);
+}
+#endif
+
 /**
  * submit_bio_noacct - re-submit a bio to the block device layer for I/O
  * @bio:  The bio describing the location in memory and on the device.
@@ -899,9 +986,15 @@ void submit_bio_noacct(struct bio *bio)
 	 * to collect a list of requests submited by a ->submit_bio method while
 	 * it is active, and then process them after it returned.
 	 */
-	if (current->bio_list)
+	if (current->bio_list) {
 		bio_list_add(&current->bio_list[0], bio);
-	else if (!bio->bi_bdev->bd_disk->fops->submit_bio)
+		return;
+	}
+#ifdef CONFIG_BLK_FILTER
+	if (!filter_bio(bio))
+		return;
+#endif
+	if (!bio->bi_bdev->bd_disk->fops->submit_bio)
 		__submit_bio_noacct_mq(bio);
 	else
 		__submit_bio_noacct(bio);
diff --git a/include/linux/blk_types.h b/include/linux/blk_types.h
index fe065c394fff..d195eadb8143 100644
--- a/include/linux/blk_types.h
+++ b/include/linux/blk_types.h
@@ -68,6 +68,10 @@ struct block_device {
 #ifdef CONFIG_FAIL_MAKE_REQUEST
 	bool			bd_make_it_fail;
 #endif
+#ifdef CONFIG_BLK_FILTER
+	struct list_head	bd_filters;
+	struct percpu_rw_semaphore bd_filters_lock;
+#endif
 } __randomize_layout;
 
 #define bdev_whole(_bdev) \
@@ -321,6 +325,9 @@ enum {
 	BIO_REMAPPED,
 	BIO_ZONE_WRITE_LOCKED,	/* Owns a zoned device zone write lock */
 	BIO_PERCPU_CACHE,	/* can participate in per-cpu alloc cache */
+#ifdef CONFIG_BLK_FILTER
+	BIO_FILTERED,		/* bio has already been filtered */
+#endif
 	BIO_FLAG_LAST
 };
 
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 16b47035e4b0..a3a5988085ca 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -1341,4 +1341,112 @@ struct io_comp_batch {
 
 #define DEFINE_IO_COMP_BATCH(name)	struct io_comp_batch name = { }
 
+#ifdef CONFIG_BLK_FILTER
+#define BDEV_FILTER_NAME_MAX_LENGTH 31
+/**
+ * enum bdev_filter_result - The result of bio processing by
+ *	the block device filter.
+ *
+ * @bdev_filter_skip:
+ *	Original bio does not need to be submitted.
+ * @bdev_filter_pass:
+ *	It is necessary to submit the original request.
+ * @bdev_filter_repeat:
+ *	Bio processing has not been completed, a second call is required.
+ * @bdev_filter_redirect:
+ *	Original bio was redirected to another block device. The set
+ *	of filters on it is different, so processing must be repeated.
+ */
+enum bdev_filter_result {
+	bdev_filter_skip = 0,
+	bdev_filter_pass,
+	bdev_filter_repeat,
+	bdev_filter_redirect
+};
+/**
+ * bdev_filter_operations - List of callback functions for the filter.
+ *
+ * @submit_bio_cb:
+ *	A callback function for bio processing.
+ * @detach_cb:
+ *	A callback function to disable the filter when removing a block
+ *	device from the system.
+ */
+struct bdev_filter_operations {
+	enum bdev_filter_result (*submit_bio_cb)(struct bio *bio, void *ctx);
+	void (*detach_cb)(void *ctx);
+};
+/**
+ * struct bdev_filter - Block device filter.
+ *
+ * @link:
+ *	Provides linking of block device filters to a list.
+ * @name:
+ *	The unique name of the block device filter.
+ * @fops:
+ *	Struct bdev_filter_operations with callback functions for the filter.
+ * @ctx:
+ *	The filter context for this block device.
+ */
+struct bdev_filter {
+	struct list_head link;
+	char name[BDEV_FILTER_NAME_MAX_LENGTH + 1];
+	const struct bdev_filter_operations *fops;
+	void *ctx;
+};
+/**
+ * filter_write_lock() - Locks processing of I/O requests for a block device.
+ * @bdev:
+ *	Pointer to &struct block_device.
+ *
+ * Locks execution of the submit_bio_noacct() function for the block device.
+ * To avoid calling a deadlock, do not call I/O operations after this lock.
+ * The memalloc_noio_save() function can be useful for this purpose.
+ *
+ */
+static inline void bdev_filter_write_lock(struct block_device *bdev)
+{
+	percpu_down_write(&bdev->bd_filters_lock);
+};
+/**
+ * filter_write_unlock - Unlocks processing of I/O requests for a block device.
+ * @bdev:
+ *	Pointer to &struct block_device.
+ *
+ * The submit_bio_noacct() function can be continued.
+ */
+static inline void bdev_filter_write_unlock(struct block_device *bdev)
+{
+	percpu_up_write(&bdev->bd_filters_lock);
+};
+/**
+ * filter_read_lock - Lock the list of filters to protect them from changes.
+ * @bdev:
+ *	Pointer to &struct block_device.
+ *
+ * The lock ensures that a filter will not be removed from the list until
+ * the lock is removed.
+ */
+static inline void bdev_filter_read_lock(struct block_device *bdev)
+{
+	percpu_down_read(&bdev->bd_filters_lock);
+};
+/**
+ * filter_read_unlock - Unlock the list of filters.
+ * @bdev:
+ *	Pointer to &struct block_device.
+ */
+static inline void bdev_filter_read_unlock(struct block_device *bdev)
+{
+	percpu_up_read(&bdev->bd_filters_lock);
+};
+
+int bdev_filter_add(struct block_device *bdev, const char *name,
+			const struct bdev_filter_operations *fops, void *ctx);
+int bdev_filter_del(struct block_device *bdev, const char *name);
+
+void *bdev_filter_get_ctx(struct block_device *bdev, const char *name);
+
+#endif
+
 #endif /* _LINUX_BLKDEV_H */
-- 
2.20.1

